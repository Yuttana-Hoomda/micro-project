
project_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00001460  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000458  08000458  00001460  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000458  08000460  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000460  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000460  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000417  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e0  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000040  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e109  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c4d  00000000  00000000  0000fc39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050c73  00000000  00000000  00010886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000614f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000098  00000000  00000000  0006153c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000615d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000440 	.word	0x08000440

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000440 	.word	0x08000440

080001d8 <main>:
#include "stm32f4xx.h"
#include "sub_function.h"

#define THRESHOLD 1333333

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN+RCC_AHB1ENR_GPIOBEN+RCC_AHB1ENR_GPIOAEN);
 80001de:	4b10      	ldr	r3, [pc, #64]	@ (8000220 <main+0x48>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000220 <main+0x48>)
 80001e4:	f043 0307 	orr.w	r3, r3, #7
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30

   while(1) {
	   for (int i = 0; i <= 5; i++) {
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e00f      	b.n	8000210 <main+0x38>
		   seven_segment(i);
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f000 f819 	bl	8000228 <seven_segment>
		   for(uint32_t iter =0; iter < THRESHOLD; iter++) {}
 80001f6:	2300      	movs	r3, #0
 80001f8:	603b      	str	r3, [r7, #0]
 80001fa:	e002      	b.n	8000202 <main+0x2a>
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	603b      	str	r3, [r7, #0]
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	4a07      	ldr	r2, [pc, #28]	@ (8000224 <main+0x4c>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d9f8      	bls.n	80001fc <main+0x24>
	   for (int i = 0; i <= 5; i++) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b05      	cmp	r3, #5
 8000214:	ddec      	ble.n	80001f0 <main+0x18>
	   }
   return 0;
 8000216:	2300      	movs	r3, #0
   }
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40023800 	.word	0x40023800
 8000224:	00145854 	.word	0x00145854

08000228 <seven_segment>:
#define STM32F411xE
#include "stm32f4xx.h"
#include "sub_function.h"

void seven_segment(int number) {
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
		GPIOC->MODER &= ~(GPIO_MODER_MODER7);
 8000230:	4b59      	ldr	r3, [pc, #356]	@ (8000398 <seven_segment+0x170>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a58      	ldr	r2, [pc, #352]	@ (8000398 <seven_segment+0x170>)
 8000236:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800023a:	6013      	str	r3, [r2, #0]
		GPIOC->MODER |= (0b01 << GPIO_MODER_MODER7_Pos);
 800023c:	4b56      	ldr	r3, [pc, #344]	@ (8000398 <seven_segment+0x170>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a55      	ldr	r2, [pc, #340]	@ (8000398 <seven_segment+0x170>)
 8000242:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000246:	6013      	str	r3, [r2, #0]
		GPIOC->OTYPER &= ~(GPIO_OTYPER_OT7);
 8000248:	4b53      	ldr	r3, [pc, #332]	@ (8000398 <seven_segment+0x170>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a52      	ldr	r2, [pc, #328]	@ (8000398 <seven_segment+0x170>)
 800024e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000252:	6053      	str	r3, [r2, #4]
		GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7);
 8000254:	4b50      	ldr	r3, [pc, #320]	@ (8000398 <seven_segment+0x170>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	4a4f      	ldr	r2, [pc, #316]	@ (8000398 <seven_segment+0x170>)
 800025a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800025e:	6093      	str	r3, [r2, #8]

		GPIOB->MODER &= ~(GPIO_MODER_MODER10);
 8000260:	4b4e      	ldr	r3, [pc, #312]	@ (800039c <seven_segment+0x174>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a4d      	ldr	r2, [pc, #308]	@ (800039c <seven_segment+0x174>)
 8000266:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800026a:	6013      	str	r3, [r2, #0]
		GPIOB->MODER |= (0b01 << GPIO_MODER_MODER10_Pos);
 800026c:	4b4b      	ldr	r3, [pc, #300]	@ (800039c <seven_segment+0x174>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a4a      	ldr	r2, [pc, #296]	@ (800039c <seven_segment+0x174>)
 8000272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000276:	6013      	str	r3, [r2, #0]
		GPIOB->OTYPER &= ~(GPIO_OTYPER_OT10);
 8000278:	4b48      	ldr	r3, [pc, #288]	@ (800039c <seven_segment+0x174>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a47      	ldr	r2, [pc, #284]	@ (800039c <seven_segment+0x174>)
 800027e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000282:	6053      	str	r3, [r2, #4]
		GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10);
 8000284:	4b45      	ldr	r3, [pc, #276]	@ (800039c <seven_segment+0x174>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a44      	ldr	r2, [pc, #272]	@ (800039c <seven_segment+0x174>)
 800028a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800028e:	6093      	str	r3, [r2, #8]

		GPIOA->MODER &= ~(GPIO_MODER_MODER8);
 8000290:	4b43      	ldr	r3, [pc, #268]	@ (80003a0 <seven_segment+0x178>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a42      	ldr	r2, [pc, #264]	@ (80003a0 <seven_segment+0x178>)
 8000296:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800029a:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (0b01 << GPIO_MODER_MODER8_Pos);
 800029c:	4b40      	ldr	r3, [pc, #256]	@ (80003a0 <seven_segment+0x178>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a3f      	ldr	r2, [pc, #252]	@ (80003a0 <seven_segment+0x178>)
 80002a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002a6:	6013      	str	r3, [r2, #0]
		GPIOA->OTYPER &= ~(GPIO_OTYPER_OT8);
 80002a8:	4b3d      	ldr	r3, [pc, #244]	@ (80003a0 <seven_segment+0x178>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a3c      	ldr	r2, [pc, #240]	@ (80003a0 <seven_segment+0x178>)
 80002ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80002b2:	6053      	str	r3, [r2, #4]
		GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED8);
 80002b4:	4b3a      	ldr	r3, [pc, #232]	@ (80003a0 <seven_segment+0x178>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a39      	ldr	r2, [pc, #228]	@ (80003a0 <seven_segment+0x178>)
 80002ba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002be:	6093      	str	r3, [r2, #8]

		GPIOA->MODER &= ~(GPIO_MODER_MODER9);
 80002c0:	4b37      	ldr	r3, [pc, #220]	@ (80003a0 <seven_segment+0x178>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a36      	ldr	r2, [pc, #216]	@ (80003a0 <seven_segment+0x178>)
 80002c6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002ca:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (0b01 << GPIO_MODER_MODER9_Pos);
 80002cc:	4b34      	ldr	r3, [pc, #208]	@ (80003a0 <seven_segment+0x178>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a33      	ldr	r2, [pc, #204]	@ (80003a0 <seven_segment+0x178>)
 80002d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002d6:	6013      	str	r3, [r2, #0]
		GPIOA->OTYPER &= ~(GPIO_OTYPER_OT9);
 80002d8:	4b31      	ldr	r3, [pc, #196]	@ (80003a0 <seven_segment+0x178>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4a30      	ldr	r2, [pc, #192]	@ (80003a0 <seven_segment+0x178>)
 80002de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002e2:	6053      	str	r3, [r2, #4]
		GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED9);
 80002e4:	4b2e      	ldr	r3, [pc, #184]	@ (80003a0 <seven_segment+0x178>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a2d      	ldr	r2, [pc, #180]	@ (80003a0 <seven_segment+0x178>)
 80002ea:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002ee:	6093      	str	r3, [r2, #8]

		GPIOC->BSRR = (1 << (7 + 16));
 80002f0:	4b29      	ldr	r3, [pc, #164]	@ (8000398 <seven_segment+0x170>)
 80002f2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80002f6:	619a      	str	r2, [r3, #24]
		GPIOA->BSRR = (1 << (8 + 16));
 80002f8:	4b29      	ldr	r3, [pc, #164]	@ (80003a0 <seven_segment+0x178>)
 80002fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002fe:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR = (1 << (10 + 16));
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <seven_segment+0x174>)
 8000302:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000306:	619a      	str	r2, [r3, #24]
		GPIOA->BSRR = (1 << (9 + 16));
 8000308:	4b25      	ldr	r3, [pc, #148]	@ (80003a0 <seven_segment+0x178>)
 800030a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800030e:	619a      	str	r2, [r3, #24]

		if(number == 1) {
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d103      	bne.n	800031e <seven_segment+0xf6>
			GPIOC->BSRR = (1 << 7);
 8000316:	4b20      	ldr	r3, [pc, #128]	@ (8000398 <seven_segment+0x170>)
 8000318:	2280      	movs	r2, #128	@ 0x80
 800031a:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR = (1 << (7 + 16));
			GPIOA->BSRR = (1 << (8 + 16));
			GPIOB->BSRR = (1 << (10 + 16));
			GPIOA->BSRR = (1 << (9 + 16));
		}
}
 800031c:	e035      	b.n	800038a <seven_segment+0x162>
		} else if(number == 2) {
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d104      	bne.n	800032e <seven_segment+0x106>
			GPIOA->BSRR = (1 << 8);
 8000324:	4b1e      	ldr	r3, [pc, #120]	@ (80003a0 <seven_segment+0x178>)
 8000326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800032a:	619a      	str	r2, [r3, #24]
}
 800032c:	e02d      	b.n	800038a <seven_segment+0x162>
		} else if (number == 3) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b03      	cmp	r3, #3
 8000332:	d107      	bne.n	8000344 <seven_segment+0x11c>
			GPIOC->BSRR = (1 << 7);
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <seven_segment+0x170>)
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = (1 << 8);
 800033a:	4b19      	ldr	r3, [pc, #100]	@ (80003a0 <seven_segment+0x178>)
 800033c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000340:	619a      	str	r2, [r3, #24]
}
 8000342:	e022      	b.n	800038a <seven_segment+0x162>
		} else if (number == 4) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b04      	cmp	r3, #4
 8000348:	d104      	bne.n	8000354 <seven_segment+0x12c>
			GPIOB->BSRR = (1 << 10);
 800034a:	4b14      	ldr	r3, [pc, #80]	@ (800039c <seven_segment+0x174>)
 800034c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000350:	619a      	str	r2, [r3, #24]
}
 8000352:	e01a      	b.n	800038a <seven_segment+0x162>
		} else if (number == 5) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b05      	cmp	r3, #5
 8000358:	d107      	bne.n	800036a <seven_segment+0x142>
			GPIOB->BSRR = (1 << 10);
 800035a:	4b10      	ldr	r3, [pc, #64]	@ (800039c <seven_segment+0x174>)
 800035c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000360:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR = (1 << 7);
 8000362:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <seven_segment+0x170>)
 8000364:	2280      	movs	r2, #128	@ 0x80
 8000366:	619a      	str	r2, [r3, #24]
}
 8000368:	e00f      	b.n	800038a <seven_segment+0x162>
			GPIOC->BSRR = (1 << (7 + 16));
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <seven_segment+0x170>)
 800036c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000370:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = (1 << (8 + 16));
 8000372:	4b0b      	ldr	r3, [pc, #44]	@ (80003a0 <seven_segment+0x178>)
 8000374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000378:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR = (1 << (10 + 16));
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <seven_segment+0x174>)
 800037c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000380:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR = (1 << (9 + 16));
 8000382:	4b07      	ldr	r3, [pc, #28]	@ (80003a0 <seven_segment+0x178>)
 8000384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000388:	619a      	str	r2, [r3, #24]
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40020800 	.word	0x40020800
 800039c:	40020400 	.word	0x40020400
 80003a0:	40020000 	.word	0x40020000

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	@ (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	@ (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	@ (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	@ (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	@ (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80003d6:	f7ff feff 	bl	80001d8 <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	2000001c 	.word	0x2000001c

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	@ (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	@ (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
